{"version":3,"sources":["C:/workspacew3/atomiCoconut/client/configuration.ts","C:/workspacew3/atomiCoconut/client/src/$_gendir lazy","C:/workspacew3/atomiCoconut/client/src/app/app.component.html","C:/workspacew3/atomiCoconut/client/src/app/app.component.scss","C:/workspacew3/atomiCoconut/client/src/app/app.component.ts","C:/workspacew3/atomiCoconut/client/src/app/app.module.ts","C:/workspacew3/atomiCoconut/client/src/app/app.routing.module.ts","C:/workspacew3/atomiCoconut/client/src/app/app.service.ts","C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.component.html","C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.component.scss","C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.component.ts","C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.service.ts","C:/workspacew3/atomiCoconut/client/src/app/directives/equal-validator.directive.ts","C:/workspacew3/atomiCoconut/client/src/app/investments/investments.component.html","C:/workspacew3/atomiCoconut/client/src/app/investments/investments.component.scss","C:/workspacew3/atomiCoconut/client/src/app/investments/investments.component.ts","C:/workspacew3/atomiCoconut/client/src/app/modules/custom-material-design/custom-material-design.module.ts","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/login/login.component.html","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/login/login.component.scss","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/login/login.component.ts","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/register/register.component.html","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/register/register.component.scss","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/register/register.component.ts","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/reset-password/reset-password.component.html","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/reset-password/reset-password.component.scss","C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/reset-password/reset-password.component.ts","C:/workspacew3/atomiCoconut/client/src/app/modules/users/users-routing.module.ts","C:/workspacew3/atomiCoconut/client/src/app/modules/users/users.module.ts","C:/workspacew3/atomiCoconut/client/src/app/modules/users/users.service.ts","C:/workspacew3/atomiCoconut/client/src/environments/environment.ts","C:/workspacew3/atomiCoconut/client/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["export const configuration = {\r\n  defaultGravatarUrl : 'https://gravatar.com/avatar/7038663cc684aa330956752c7e6fe7d4?s=200'\r\n};\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/configuration.ts","function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_gendir lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/$$_gendir lazy\n// module id = ../../../../../src/$$_gendir lazy recursive\n// module chunks = main","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<div class=\\\"inner mat-typography\\\">\\r\\n\\r\\n  <md-toolbar class=\\\"toolbar\\\" color=\\\"primary\\\">\\r\\n    <span>AtomiCoconut</span>\\r\\n    <span class=\\\"example-spacer\\\"></span>\\r\\n    \\r\\n    <span *ngIf=\\\"!usersService.getUser()\\\" fxLayoutAlign=\\\" center\\\">\\r\\n      <md-icon routerLink=\\\"/login\\\" class=\\\"toolbar__icon\\\">account_circle</md-icon>\\r\\n    </span>\\r\\n    <span *ngIf=\\\"usersService.getUser()\\\" fxLayoutAlign=\\\" center\\\">\\r\\n      <img *ngIf=\\\"usersService.getUser().avatar !== defaultGravatarUrl\\\" [mdMenuTriggerFor]=\\\"userMenu\\\" \\r\\n          class=\\\"toolbar__icon user__avatar\\\" [src]=\\\"usersService.getUser().avatar\\\" />\\r\\n      <md-icon *ngIf=\\\"usersService.getUser().avatar === defaultGravatarUrl\\\"\\r\\n          class=\\\"toolbar__icon user__icon--logged-in\\\" [mdMenuTriggerFor]=\\\"userMenu\\\">account_circle</md-icon>\\r\\n      \\r\\n      <md-menu class=\\\"user__menu--logged-in\\\" #userMenu=\\\"mdMenu\\\" [overlapTrigger]=\\\"false\\\">\\r\\n        <button md-menu-item>\\r\\n          <md-icon>settings</md-icon>\\r\\n          <span>My account</span>\\r\\n        </button>\\r\\n        <button md-menu-item (click)=\\\"logout()\\\">\\r\\n          <md-icon>exit_to_app</md-icon>\\r\\n          <span>Logout</span>\\r\\n        </button>\\r\\n      </md-menu>\\r\\n    </span>\\r\\n    \\r\\n  </md-toolbar>\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".toolbar {\\n  margin-bottom: 10px; }\\n  .toolbar .toolbar__icon {\\n    padding: 0 10px;\\n    cursor: pointer; }\\n  .toolbar .example-spacer {\\n    -ms-flex: 1 1 auto;\\n        flex: 1 1 auto; }\\n  .toolbar .user__avatar {\\n    border-radius: 50%;\\n    width: 30px;\\n    padding: 0 10px; }\\n  .toolbar .user__icon--logged-in {\\n    color: #28FE7C; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/app.component.scss\n// module id = ../../../../../src/app/app.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { AppService } from './app.service';\r\nimport { UsersService } from './modules/users/users.service';\r\n\r\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\r\nimport { configuration } from \"../../configuration\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  \r\n  title = 'app';\r\n  defaultGravatarUrl = configuration.defaultGravatarUrl;\r\n\r\n  constructor(private appService: AppService, private usersService : UsersService) { }\r\n\r\n  ngOnInit(): void {\r\n    let methodTrace = `${this.constructor.name} > ngOnInit() > `; //for debugging  \r\n    \r\n    this.usersService.getAuthenticatedUser().subscribe(\r\n      (data : any) => {\r\n        if (data && data.email) {\r\n          this.usersService.setUser(data);\r\n        } else {\r\n          this.usersService.setUser();\r\n          console.info(`${methodTrace} User not logged in.`)\r\n        }\r\n      },\r\n      (error : any) =>  console.error(`${methodTrace} There was an error with the register service > ${error}`)\r\n    );\r\n  }\r\n\r\n  logout() : void {\r\n    let methodTrace = `${this.constructor.name} > logout() > `; //for debugging  \r\n    \r\n    this.usersService.logout().subscribe(\r\n      (data : any) => {\r\n        this.usersService.setUser();\r\n      },\r\n      (error : any) =>  console.error(`${methodTrace} There was an error with the register service > ${error}`)\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport { HttpModule } from '@angular/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport 'hammerjs';\r\n\r\nimport { AppRoutingModule } from \"./app.routing.module\";\r\nimport { AppComponent } from './app.component';\r\nimport { AppService } from './app.service';\r\nimport { CustomMaterialDesignModule } from './modules/custom-material-design/custom-material-design.module';\r\nimport { UsersModule } from './modules/users/users.module';\r\nimport { CryptoCurrencyComponent } from './crypto-currency/crypto-currency.component'\r\nimport { CrytoCurrencyService } from './crypto-currency/crypto-currency.service';\r\nimport { InvestmentsComponent } from './investments/investments.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    HttpModule,\r\n    FlexLayoutModule,\r\n    CustomMaterialDesignModule,\r\n    UsersModule\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    CryptoCurrencyComponent,\r\n    InvestmentsComponent\r\n  ],\r\n  providers: [AppService, CrytoCurrencyService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/app.module.ts","/**\r\n * Created by mpaoluc on 13/01/2017.\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {AppComponent} from \"./app.component\";\r\nimport {InvestmentsComponent} from './investments/investments.component';\r\n\r\nconst appRoutes : Routes = [\r\n  {\r\n    path : '',\r\n    redirectTo : 'investments',\r\n    pathMatch : 'full'\r\n  },\r\n  {\r\n    path : 'investments',\r\n    component : InvestmentsComponent\r\n  }\r\n  // {\r\n  //   path : 'page-not-found',\r\n  //   component : PageNotFoundComponent\r\n  // },\r\n  // {\r\n  //   path : '**',\r\n  //   component : PageNotFoundComponent\r\n  // }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(appRoutes)\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ]\r\n})\r\nexport class AppRoutingModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/app.routing.module.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\n\r\nimport {Observable} from \"rxjs/Rx\";\r\n\r\n@Injectable()\r\nexport class AppService {\r\n\r\n  constructor(private http : Http) {}\r\n\r\n  private extractData(res: Response) : any {\r\n    let body = res.json();\r\n    if (body.success === true) {\r\n      return body.ticker;\r\n    } else {\r\n      throw body;\r\n    }\r\n  }\r\n\r\n  private handleError (error: Response | any) {\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    let errMsg: string;\r\n    if (error instanceof Response) {\r\n      const body = error.json() || '';\r\n      const err = body.error || JSON.stringify(body);\r\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n    } else {\r\n      errMsg = error.message ? error.message : error.toString();\r\n    }\r\n    console.error(errMsg);\r\n    return Observable.throw(errMsg);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/app.service.ts","module.exports = \"<md-card class=\\\"currency-card\\\">\\n  <md-card-header>\\n    <div md-card-avatar \\n        class=\\\"header-image\\\"\\n        [class.header-image__xmr]=\\\"cryptoCurrency === 'xmr'\\\"\\n        [class.header-image__btc]=\\\"cryptoCurrency === 'btc'\\\">\\n    </div>\\n    <md-card-title>{{cryptoCurrency === 'xmr' ? 'Monero' : 'Bitcoin' }} ({{cryptoCurrencyCount}})</md-card-title>\\n    <md-card-subtitle>\\n      today at <strong>{{cryptoCurrencyCurrentPrice | currency}}</strong>\\n    </md-card-subtitle>\\n  </md-card-header>\\n  <md-card-content>\\n    Investment: <strong>{{usdFromCryptoCurrencyWhenBought | currency }}</strong> \\n    <br>\\n\\n    on {{cryptoCurrencyBuyDate | date}} at {{cryptoCurrencyBuyPrice | currency}}\\n\\n    <div [class.color__green]=\\\"usdFromCryptoCurrency >= usdFromCryptoCurrencyWhenBought\\\" \\n        [class.color__red]=\\\"usdFromCryptoCurrency < usdFromCryptoCurrencyWhenBought\\\">\\n      <br>\\n      ROI: <strong>{{ usdFromCryptoCurrency | currency }}</strong> ({{usdFromCryptoCurrency / usdFromCryptoCurrencyWhenBought * 100 | number : '1.1-2'}}%)\\n    </div>\\n  </md-card-content>\\n</md-card>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.component.html\n// module id = ../../../../../src/app/crypto-currency/crypto-currency.component.html\n// module chunks = main","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".currency-card {\\n  text-align: center; }\\n  .currency-card .header-image {\\n    background-size: cover; }\\n    .currency-card .header-image.header-image__xmr {\\n      background-image: url(\\\"/assets/images/xmr.png\\\"); }\\n    .currency-card .header-image.header-image__btc {\\n      background-image: url(\\\"/assets/images/btc.png\\\"); }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.component.scss\n// module id = ../../../../../src/app/crypto-currency/crypto-currency.component.scss\n// module chunks = main","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { CrytoCurrencyService } from './crypto-currency.service';\n\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\n\n@Component({\n  selector: 'app-crypto-currency',\n  templateUrl: './crypto-currency.component.html',\n  styleUrls: ['./crypto-currency.component.scss']\n})\nexport class CryptoCurrencyComponent implements OnInit {\n\n  private cryptoCurrency$ : BehaviorSubject<any>;\n  @Input() cryptoCurrency : string;\n  @Input() cryptoCurrencyCount : number;\n  @Input() cryptoCurrencyBuyPrice : number; //USD\n  @Input() cryptoCurrencyBuyDate : Date;\n  private usdFromCryptoCurrency : number = 0;\n  private usdFromCryptoCurrencyWhenBought : number = 0;\n  private cryptoCurrencyCurrentPrice : number = 0;\n  @Output() totalReturns: EventEmitter<any> = new EventEmitter();\n\n  constructor(private crytoCurrencyService: CrytoCurrencyService) {\n    this.cryptoCurrency$ = new BehaviorSubject<any>(null);\n  }\n\n  ngOnInit() : void {\n    let methodTrace = `${this.constructor.name} > ngOnInit() > `; //for debugging\n    \n    this.usdFromCryptoCurrencyWhenBought = this.cryptoCurrencyBuyPrice * this.cryptoCurrencyCount;\n    this.crytoCurrencyService.getPrices(this.cryptoCurrency).subscribe(\n      (pricesData : any) => {\n        this.cryptoCurrency$.next(pricesData);\n        this.cryptoCurrencyCurrentPrice = pricesData.price; \n        this.usdFromCryptoCurrency = pricesData.price * this.cryptoCurrencyCount;\n        this.totalReturns.emit({\n          usdFromCryptoCurrencyWhenBought : this.usdFromCryptoCurrencyWhenBought,\n          usdFromCryptoCurrency : this.usdFromCryptoCurrency\n        }); \n      },\n      (error : any) =>  console.error(`${methodTrace} There was an error trying to load Monero prices > ${error}`)\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\n\r\nimport {Observable} from \"rxjs/Rx\";\r\n\r\n@Injectable()\r\nexport class CrytoCurrencyService {\r\n\r\n  private serverUrl : string = 'https://api.cryptonator.com/api/ticker/';\r\n  \r\n\r\n  constructor(private http : Http) {}\r\n\r\n  getPrices(currency = 'btc') : Observable<any> {\r\n    \r\n    return this.http.get(`${this.serverUrl}${currency}-usd`)\r\n        .map(this.extractData)\r\n        .catch(this.handleError);\r\n  }\r\n\r\n  private extractData(res: Response) : any {\r\n    let body = res.json();\r\n    if (body.success === true) {\r\n      return body.ticker;\r\n    } else {\r\n      throw body;\r\n    }\r\n  }\r\n\r\n  private handleError (error: Response | any) {\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    let errMsg: string;\r\n    if (error instanceof Response) {\r\n      const body = error.json() || '';\r\n      const err = body.error || JSON.stringify(body);\r\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n    } else {\r\n      errMsg = error.message ? error.message : error.toString();\r\n    }\r\n    console.error(errMsg);\r\n    return Observable.throw(errMsg);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/crypto-currency/crypto-currency.service.ts","import { Directive, Input, Attribute } from '@angular/core';\r\nimport { ValidatorFn, Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[equalvalidator]',\r\n  providers: [{provide: NG_VALIDATORS, useExisting: EqualValidatorDirective, multi: true}]\r\n})\r\nexport class EqualValidatorDirective implements Validator {\r\n  \r\n  constructor(@Attribute('equalvalidator') public equalFormControlName: string,\r\n      @Attribute('reverse') public reverse: string) {}\r\n  \r\n\r\n  private get isReverse() {\r\n    if (!this.reverse) {\r\n      return false;\r\n    }\r\n\r\n    return this.reverse === 'true' ? true : false;\r\n  }\r\n\r\n  validate(control : AbstractControl) : { [key : string] : any } {\r\n    const equalsFormControl = control.root.get(this.equalFormControlName);\r\n    if (equalsFormControl && equalsFormControl.value !== control.value) {\r\n      if (this.isReverse) {\r\n        equalsFormControl.setErrors({ 'equalvalidator' : true });\r\n      } else {\r\n        return { 'equalvalidator' : true };\r\n      }\r\n    } else if (equalsFormControl) {\r\n      //value is the same on both\r\n      if (this.reverse) {\r\n        delete equalsFormControl.errors['equalvalidator'];\r\n        if (!Object.keys(equalsFormControl.errors).length) {\r\n          equalsFormControl.setErrors(null);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/directives/equal-validator.directive.ts","module.exports = \"<div fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\r\\n    <app-crypto-currency fxFlex \\r\\n      [cryptoCurrency]=\\\"'xmr'\\\"\\r\\n      [cryptoCurrencyCount]=\\\"218.85627651\\\"\\r\\n      [cryptoCurrencyBuyPrice]=\\\"50\\\"\\r\\n      [cryptoCurrencyBuyDate]=\\\"xmrBuyDate\\\"\\r\\n      (totalReturns)=\\\"setTotals($event)\\\">\\r\\n    </app-crypto-currency>\\r\\n\\r\\n    <app-crypto-currency fxFlex\\r\\n      [cryptoCurrency]=\\\"'btc'\\\"\\r\\n      [cryptoCurrencyCount]=\\\"1.28129356\\\"\\r\\n      [cryptoCurrencyBuyPrice]=\\\"2359.99\\\"\\r\\n      [cryptoCurrencyBuyDate]=\\\"btcBuyDate\\\"\\r\\n      (totalReturns)=\\\"setTotals($event)\\\">\\r\\n    </app-crypto-currency>\\r\\n  </div>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\r\\n    <app-crypto-currency fxFlex \\r\\n      [cryptoCurrency]=\\\"'xmr'\\\"\\r\\n      [cryptoCurrencyCount]=\\\"5.94093753\\\"\\r\\n      [cryptoCurrencyBuyPrice]=\\\"87.5282\\\"\\r\\n      [cryptoCurrencyBuyDate]=\\\"xmrBuyDate2\\\"\\r\\n      (totalReturns)=\\\"setTotals($event)\\\">\\r\\n    </app-crypto-currency>\\r\\n\\r\\n    <app-crypto-currency fxFlex \\r\\n      [cryptoCurrency]=\\\"'xmr'\\\"\\r\\n      [cryptoCurrencyCount]=\\\"5.72806551\\\"\\r\\n      [cryptoCurrencyBuyPrice]=\\\"90.9556\\\"\\r\\n      [cryptoCurrencyBuyDate]=\\\"xmrBuyDate3\\\"\\r\\n      (totalReturns)=\\\"setTotals($event)\\\">\\r\\n    </app-crypto-currency>\\r\\n  </div>\\r\\n\\r\\n  <md-card fxFlex class=\\\"totals-card\\\">\\r\\n    <md-card-content fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap=\\\"10px\\\"\\r\\n        fxLayoutAlign=\\\"space-around center\\\">\\r\\n      <p>Total Investments: <strong>{{totalInvestment | currency }}</strong></p>\\r\\n      <p [class.color__green]=\\\"totalReturn >= totalInvestment\\\" \\r\\n          [class.color__red]=\\\"totalReturn < totalInvestment\\\">\\r\\n        Total ROI: <strong>{{ totalReturn | currency }}</strong> ({{totalReturn / totalInvestment * 100 | number : '1.1-2'}}%)\\r\\n      </p>\\r\\n    </md-card-content>\\r\\n  </md-card>\\r\\n  \\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/investments/investments.component.html\n// module id = ../../../../../src/app/investments/investments.component.html\n// module chunks = main","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".totals-card {\\n  text-align: center; }\\n  .totals-card md-card-content p {\\n    margin-bottom: 0; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/investments/investments.component.scss\n// module id = ../../../../../src/app/investments/investments.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-investments',\r\n  templateUrl: './investments.component.html',\r\n  styleUrls: ['./investments.component.scss']\r\n})\r\nexport class InvestmentsComponent implements OnInit {\r\n  private xmrBuyDate : Date = new Date(2017, 5, 23); //month minus 1, 5 = june\r\n  private xmrBuyDate2 : Date = new Date(2017, 8, 23);\r\n  private xmrBuyDate3 : Date = new Date(2017, 8, 25);\r\n  private btcBuyDate : Date = new Date(2017, 6, 19);\r\n  private totalInvestment = 0;\r\n  private totalReturn = 0;\r\n\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    let methodTrace = `${this.constructor.name} > ngOnInit() > `; //for debugging\r\n  }\r\n\r\n\r\n  setTotals(totalReturns : any) : void {\r\n    this.totalReturn += totalReturns.usdFromCryptoCurrency;\r\n    this.totalInvestment += totalReturns.usdFromCryptoCurrencyWhenBought;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/investments/investments.component.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MaterialModule} from '@angular/material';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MaterialModule],\r\n  exports: [MaterialModule]\r\n})\r\nexport class CustomMaterialDesignModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/modules/custom-material-design/custom-material-design.module.ts","module.exports = \"<form class=\\\"form__container\\\" (ngSubmit)=\\\"onSubmit()\\\" #loginForm=\\\"ngForm\\\" novalidate fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\" >\\r\\n  \\r\\n  <section fxLayout=\\\"column\\\" class=\\\"form__fields\\\">\\r\\n    <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxLayoutGap.gt-sm=\\\"10px\\\" class=\\\"form__fields__row\\\">\\r\\n      <!-- Email -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email address\\\" \\r\\n            [(ngModel)]=\\\"model.email\\\" \\r\\n            required email\\r\\n            #email=\\\"ngModel\\\">\\r\\n  \\r\\n        <md-error *ngIf=\\\"email.invalid && (email.dirty || email.touched) && email.errors.required\\\">Email is required</md-error>\\r\\n        <md-error *ngIf=\\\"email.invalid && (email.dirty || email.touched) && email.errors.email\\\">Email must be a valid email address</md-error>\\r\\n      </md-input-container>\\r\\n      \\r\\n      <!-- Password -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" \\r\\n            [(ngModel)]=\\\"model.password\\\" \\r\\n            required minlength=\\\"3\\\" maxlength=\\\"8\\\"\\r\\n            #password=\\\"ngModel\\\">\\r\\n  \\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.required\\\">Password is required</md-error>\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.minlength\\\">Password must be longer than 3 characters</md-error>\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.maxlength\\\">Password must be shorter than 8 characters</md-error>\\r\\n      </md-input-container>\\r\\n    </div>\\r\\n  </section>\\r\\n\\r\\n  <section fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign.gt-xs=\\\"center center\\\" class=\\\"form__actions\\\">\\r\\n    <button class=\\\"form__action mat-raised-button\\\" md-raised-button type=\\\"submit\\\" [disabled]=\\\"!loginForm.form.valid\\\">Login</button>\\r\\n    <md-checkbox fxLayoutAlign.xs=\\\"center center\\\" class=\\\"form__action\\\" [(ngModel)]=\\\"forgotModel.forgot\\\" name=\\\"forgot\\\" id=\\\"forgot\\\">Forgot my password</md-checkbox>\\r\\n  </section>\\r\\n\\r\\n</form>\\r\\n\\r\\n<form class=\\\"form__container form__forgot\\\" (ngSubmit)=\\\"onForgotSubmit()\\\" #forgotForm=\\\"ngForm\\\" novalidate fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\" *ngIf=\\\"forgotModel.forgot\\\">\\r\\n  \\r\\n  <section fxLayout=\\\"column\\\" class=\\\"form__fields\\\">\\r\\n    <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxLayoutGap.gt-sm=\\\"10px\\\" class=\\\"form__fields__row\\\">\\r\\n      <!-- Email -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        \\r\\n        <input mdInput type=\\\"email\\\" id=\\\"emailForgot\\\" name=\\\"emailForgot\\\" placeholder=\\\"Email address\\\" \\r\\n            [(ngModel)]=\\\"forgotModel.email\\\" \\r\\n            required email\\r\\n            #emailForgot=\\\"ngModel\\\">\\r\\n        <md-hint align=\\\"start\\\">Type your email and we will send you an email to reset your password.</md-hint>\\r\\n        <md-error *ngIf=\\\"emailForgot.invalid && (emailForgot.dirty || emailForgot.touched) && emailForgot.errors.required\\\">Email is required</md-error>\\r\\n        <md-error *ngIf=\\\"emailForgot.invalid && (emailForgot.dirty || emailForgot.touched) && emailForgot.errors.email\\\">Email must be a valid email address</md-error>\\r\\n      </md-input-container>\\r\\n    </div>\\r\\n  </section>\\r\\n\\r\\n  <section fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign.gt-xs=\\\"center none\\\" class=\\\"form__actions\\\">\\r\\n    <button class=\\\"form__action mat-raised-button\\\" md-raised-button type=\\\"submit\\\" [disabled]=\\\"!forgotForm.form.valid\\\">Send</button>\\r\\n  </section>\\r\\n\\r\\n</form>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/login/login.component.html\n// module id = ../../../../../src/app/modules/users/components/login/login.component.html\n// module chunks = main","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".form__forgot {\\n  margin-top: 50px; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/login/login.component.scss\n// module id = ../../../../../src/app/modules/users/components/login/login.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { UsersService } from '../../users.service';\r\nimport { MdSnackBar } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  model : any = {email : '', password : ''};\r\n  forgotModel : any = { email : '', forgot : false };\r\n\r\n  constructor(private usersService : UsersService, private router : Router, public snackBar: MdSnackBar) { }\r\n\r\n  ngOnInit() {}\r\n\r\n  onSubmit() { \r\n    const methodTrace = `${this.constructor.name} > onSubmit() > `; //for debugging\r\n\r\n    this.usersService.setUser(null); //reset authenticated user. Register automatically authenticates the registered user.\r\n    //call the register service\r\n    this.usersService.login(this.model).subscribe(\r\n      (data : any) => {\r\n        if (data && data.email) {\r\n          this.usersService.setUser(data);\r\n          this.router.navigate(['/']); //go home\r\n        } else {\r\n          console.error(`${methodTrace} Unexpected data format.`)\r\n        }\r\n      },\r\n      (error : any) => console.error(`${methodTrace} There was an error with the register service > ${error}`)\r\n    );\r\n  }\r\n\r\n  onForgotSubmit() { \r\n    const methodTrace = `${this.constructor.name} > onForgotSubmit() > `; //for debugging\r\n\r\n    //call the register service\r\n    this.usersService.forgot(this.forgotModel).subscribe(\r\n      (data : any) => {\r\n        this.showResults(`You have been emailed a password reset link.`);\r\n      },\r\n      (error : any) => {\r\n        console.error(`${methodTrace} There was an error with the forgot password service > ${error}`);\r\n        this.showResults(`No account with that email exists.`);\r\n      }\r\n    );\r\n  }\r\n\r\n  showResults(message : string) {\r\n    this.snackBar.open(message, null, {\r\n      duration: 3000,\r\n      extraClasses: ['snack-bar--simple']\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/login/login.component.ts","module.exports = \"<form class=\\\"form__container\\\" (ngSubmit)=\\\"onSubmit()\\\" #loginForm=\\\"ngForm\\\" novalidate fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\" >\\r\\n  \\r\\n  <div fxLayout=\\\"column\\\" class=\\\"form__fields\\\">\\r\\n    <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxLayoutGap.gt-sm=\\\"10px\\\" class=\\\"form__fields__row\\\" >\\r\\n      <!-- Name -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" placeholder=\\\"Name\\\" \\r\\n            [(ngModel)]=\\\"model.name\\\" \\r\\n            required minlength=\\\"4\\\"\\r\\n            #name=\\\"ngModel\\\">\\r\\n\\r\\n        <md-error *ngIf=\\\"name.invalid && (name.dirty || name.touched) && name.errors.required\\\">Name is required</md-error>\\r\\n        <md-error *ngIf=\\\"name.invalid && (name.dirty || name.touched) && name.errors.minlength\\\">Name must contains more than 4 characters</md-error>\\r\\n      </md-input-container>\\r\\n      \\r\\n      <!-- Email -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email address\\\" \\r\\n            [(ngModel)]=\\\"model.email\\\" \\r\\n            required email\\r\\n            #email=\\\"ngModel\\\">\\r\\n\\r\\n        <md-error *ngIf=\\\"email.invalid && (email.dirty || email.touched) && email.errors.required\\\">Email is required</md-error>\\r\\n        <md-error *ngIf=\\\"email.invalid && (email.dirty || email.touched) && email.errors.email\\\">Email must be a valid email address</md-error>\\r\\n      </md-input-container>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxLayoutGap.gt-sm=\\\"10px\\\" class=\\\"form__fields__row\\\" >\\r\\n      <!-- Password -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" \\r\\n            [(ngModel)]=\\\"model.password\\\" \\r\\n            required minlength=\\\"3\\\" maxlength=\\\"8\\\" equalvalidator=\\\"passwordConfirm\\\" reverse=\\\"true\\\"\\r\\n            #password=\\\"ngModel\\\">\\r\\n\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.required\\\">Password is required</md-error>\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.minlength\\\">Password must be longer than 3 characters</md-error>\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.maxlength\\\">Password must be shorter than 8 characters</md-error>\\r\\n      </md-input-container>\\r\\n\\r\\n      <!-- Password confirm -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"password\\\" id=\\\"passwordConfirm\\\" name=\\\"passwordConfirm\\\" placeholder=\\\"Confirm password\\\" \\r\\n            [(ngModel)]=\\\"model['password-confirm']\\\" \\r\\n            required minlength=\\\"3\\\" maxlength=\\\"8\\\" equalvalidator=\\\"password\\\"\\r\\n            #passwordConfirm=\\\"ngModel\\\">\\r\\n\\r\\n        <md-error *ngIf=\\\"passwordConfirm.invalid && (passwordConfirm.dirty || passwordConfirm.touched) && passwordConfirm.errors.required\\\">Confirm password is required</md-error>\\r\\n        <md-error *ngIf=\\\"passwordConfirm.invalid && (passwordConfirm.dirty || passwordConfirm.touched) && passwordConfirm.errors.minlength\\\">Confirm password must be longer than 3 characters</md-error>\\r\\n        <md-error *ngIf=\\\"passwordConfirm.invalid && (passwordConfirm.dirty || passwordConfirm.touched) && passwordConfirm.errors.maxlength\\\">Confirm password must be shorter than 8 characters</md-error>\\r\\n        <md-error *ngIf=\\\"passwordConfirm.invalid && (passwordConfirm.dirty || passwordConfirm.touched) && passwordConfirm.errors.equalvalidator\\\">Confirm password must match password</md-error>\\r\\n      </md-input-container>\\r\\n      <!-- <pre>{{passwordConfirm.errors | json}}</pre> -->\\r\\n    </div>\\r\\n    \\r\\n  </div>\\r\\n  \\r\\n  <div fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign.gt-xs=\\\"center none\\\" class=\\\"form__actions\\\">\\r\\n    <button fxFlex class=\\\"form__action mat-raised-button\\\" md-raised-button type=\\\"submit\\\" [disabled]=\\\"!loginForm.form.valid\\\">Register</button>\\r\\n  </div>\\r\\n\\r\\n</form>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/register/register.component.html\n// module id = ../../../../../src/app/modules/users/components/register/register.component.html\n// module chunks = main","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/register/register.component.scss\n// module id = ../../../../../src/app/modules/users/components/register/register.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { UsersService } from '../../users.service';\r\n\r\n@Component({\r\n  selector: 'users-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  private model : any = {name : '', email : '', password : '', 'password-confirm' : ''};\r\n  \r\n  constructor(private usersService : UsersService, private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    const methodTrace = `${this.constructor.name} > ngOnInit() > `; //for debugging\r\n  }\r\n\r\n  onSubmit() { \r\n    const methodTrace = `${this.constructor.name} > onSubmit() > `; //for debugging\r\n\r\n    //chech that the password and the confirmed password are the same\r\n    if (this.model.password !== this.model['password-confirm']) {\r\n      console.error(`${methodTrace} Confirm password must match password.`);\r\n      return false;\r\n    }\r\n\r\n    this.usersService.setUser(null); //reset authenticated user. Register automatically authenticates the registered user.\r\n    //call the register service\r\n    this.usersService.register(this.model).subscribe(\r\n      (data : any) => {\r\n        if (data && data.email) {\r\n          this.usersService.setUser(data);\r\n          this.router.navigate(['/']); //go home\r\n        } else {\r\n          console.error(`${methodTrace} Unexpected data format.`)\r\n        }\r\n      },\r\n      (error : any) => console.error(`${methodTrace} There was an error with the register service > ${error}`)\r\n    );\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/register/register.component.ts","module.exports = \"<form class=\\\"form__container\\\" (ngSubmit)=\\\"onSubmit()\\\" #resetForm=\\\"ngForm\\\" novalidate fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\" >\\r\\n  \\r\\n  <div fxLayout=\\\"column\\\" class=\\\"form__fields\\\">\\r\\n    <div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row\\\" fxLayoutGap.gt-sm=\\\"10px\\\" class=\\\"form__fields__row\\\" >\\r\\n      <!-- Password -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" \\r\\n            [(ngModel)]=\\\"model.password\\\" \\r\\n            required minlength=\\\"3\\\" maxlength=\\\"8\\\"\\r\\n            #password=\\\"ngModel\\\">\\r\\n\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.required\\\">Password is required</md-error>\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.minlength\\\">Password must be longer than 3 characters</md-error>\\r\\n        <md-error *ngIf=\\\"password.invalid && (password.dirty || password.touched) && password.errors.maxlength\\\">Password must be shorter than 8 characters</md-error>\\r\\n      </md-input-container>\\r\\n\\r\\n      <!-- Password confirm -->\\r\\n      <md-input-container fxFlex class=\\\"form__field\\\">\\r\\n        <input mdInput type=\\\"password\\\" id=\\\"passwordConfirm\\\" name=\\\"passwordConfirm\\\" placeholder=\\\"Confirm password\\\" \\r\\n            [(ngModel)]=\\\"model['password-confirm']\\\" \\r\\n            required minlength=\\\"3\\\" maxlength=\\\"8\\\"\\r\\n            #passwordConfirm=\\\"ngModel\\\">\\r\\n\\r\\n        <md-error *ngIf=\\\"passwordConfirm.invalid && (passwordConfirm.dirty || passwordConfirm.touched) && passwordConfirm.errors.required\\\">Confirm password is required</md-error>\\r\\n        <md-error *ngIf=\\\"passwordConfirm.invalid && (passwordConfirm.dirty || passwordConfirm.touched) && passwordConfirm.errors.minlength\\\">Confirm password must be longer than 3 characters</md-error>\\r\\n        <md-error *ngIf=\\\"passwordConfirm.invalid && (passwordConfirm.dirty || passwordConfirm.touched) && passwordConfirm.errors.maxlength\\\">Confirm password must be shorter than 8 characters</md-error>\\r\\n      </md-input-container>\\r\\n    </div>\\r\\n    \\r\\n    \\r\\n    \\r\\n  </div>\\r\\n  \\r\\n  <div fxLayout=\\\"column\\\" fxLayout.gt-xs=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign.gt-xs=\\\"center none\\\" class=\\\"form__actions\\\">\\r\\n    <button fxFlex class=\\\"form__action mat-raised-button\\\" md-raised-button type=\\\"submit\\\" [disabled]=\\\"!resetForm.form.valid\\\">Reset password</button>\\r\\n  </div>\\r\\n\\r\\n</form>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/reset-password/reset-password.component.html\n// module id = ../../../../../src/app/modules/users/components/reset-password/reset-password.component.html\n// module chunks = main","exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/reset-password/reset-password.component.scss\n// module id = ../../../../../src/app/modules/users/components/reset-password/reset-password.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute, ParamMap  } from '@angular/router';\r\n\r\nimport { UsersService } from '../../users.service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n  model : any = { password : '', 'password-confirm' : ''};\r\n  token : string = '';\r\n\r\n  constructor(private usersService : UsersService, private router : Router, private route : ActivatedRoute ) { }\r\n\r\n  ngOnInit() {\r\n    const methodTrace = `${this.constructor.name} > ngOnInit() > `; //for debugging\r\n    \r\n    this.route.paramMap.map((params: ParamMap) => params.get('token'))\r\n        .subscribe(token => { \r\n          if (token) {\r\n            this.token = token;\r\n          } else {\r\n            console.error(`${methodTrace} Token must be set to reset a password.`);\r\n            this.router.navigate(['/']);\r\n          }\r\n        });\r\n  }\r\n\r\n  onSubmit() { \r\n    const methodTrace = `${this.constructor.name} > onSubmit() > `; //for debugging\r\n\r\n    //chech that the password and the confirmed password are the same\r\n    if (this.model.password !== this.model['password-confirm']) {\r\n      console.error(`${methodTrace} Confirm password must match password.`);\r\n      return false;\r\n    }\r\n\r\n    //call the register service\r\n    this.usersService.reset(this.token, this.model).subscribe(\r\n      (data : any) => {\r\n        if (data) {\r\n          this.router.navigate(['/']); //go home\r\n        } else {\r\n          console.error(`${methodTrace} Unexpected data format.`)\r\n        }\r\n      },\r\n      (error : any) => console.error(`${methodTrace} There was an error with the register service > ${error}`)\r\n    );\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/components/reset-password/reset-password.component.ts","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n//import { ActivatedRouteSnapshot } from '@angular/router';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\r\n\r\nconst routes: Routes = [\r\n  { path : 'register', component : RegisterComponent },\r\n  { path : 'login', component : LoginComponent },\r\n  { path : 'account/reset/expired', component : LoginComponent },\r\n  { path : 'account/reset/:token', component : ResetPasswordComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/users-routing.module.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { CustomMaterialDesignModule } from '../../modules/custom-material-design/custom-material-design.module';\r\n\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { UsersService } from './users.service';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\r\nimport { EqualValidatorDirective } from '../../directives/equal-validator.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    UsersRoutingModule,\r\n    FormsModule,\r\n    FlexLayoutModule,\r\n    CustomMaterialDesignModule\r\n  ],\r\n  declarations: [\r\n    RegisterComponent,\r\n    LoginComponent,\r\n    ResetPasswordComponent,\r\n    EqualValidatorDirective\r\n  ],\r\n  providers: [UsersService]\r\n})\r\nexport class UsersModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/users.module.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\n\r\nimport {Observable} from \"rxjs/Rx\";\r\nimport {environment} from \"../../../environments/environment\";\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n\r\n  private serverHost : string = environment.apiHost + '/api/users';\r\n  private headers = new Headers({'Content-Type': 'application/json'});\r\n  private user : any = null;\r\n\r\n  constructor(private http : Http) {}\r\n\r\n  /**\r\n   * Server call to Register a new user in the system \r\n   * @param postData \r\n   */\r\n  register(postData : any = {}) : Observable<any> {\r\n    return this.http.post(`${this.serverHost}/register`, postData, { headers : this.headers })\r\n        .map(this.extractData)\r\n        .catch(this.handleError);\r\n  }\r\n\r\n  /**\r\n   * Server call to retrieve the currently authenticated user, or null if nobody .\r\n   */\r\n  getAuthenticatedUser() : Observable<any> {\r\n    return this.http.get(`${this.serverHost}/getUser`)\r\n        .map(this.extractData)\r\n        .catch(this.handleError);\r\n  }\r\n\r\n  /**\r\n   * Server call to login the provided user email and pass.\r\n   */\r\n  login(postData : any = {}) : Observable<any> {\r\n    return this.http.post(`${this.serverHost}/login`, postData, { headers : this.headers })\r\n        .map(this.extractData)\r\n        .catch(this.handleError);\r\n  }\r\n\r\n  /**\r\n   * Server call to forgot with the provided user email.\r\n   */\r\n  forgot(postData : any = {}) : Observable<any> {\r\n    return this.http.post(`${this.serverHost}/account/forgot`, postData, { headers : this.headers })\r\n        .map(this.extractData)\r\n        .catch(this.handleError);\r\n  }\r\n\r\n  /**\r\n   * Server call to reset password api with the provided new password.\r\n   */\r\n  reset(token : string, postData : any = {}) : Observable<any> {\r\n    return this.http.post(`${this.serverHost}/account/reset/${token}`, postData, { headers : this.headers })\r\n        .map(this.extractData)\r\n        .catch(this.handleError);\r\n  }\r\n\r\n  /**\r\n   * Server call to login the provided user email and pass.\r\n   */\r\n  logout() : Observable<any> {\r\n    return this.http.get(`${this.serverHost}/logout`)\r\n        .map(this.extractData)\r\n        .catch(this.handleError);\r\n  }\r\n  \r\n  /**\r\n   * Tells whether the user is logged in in the system. Checks the local user variable\r\n   */\r\n  isLoggedIn() : boolean {\r\n    return this.user && this.user.email ? true : false;\r\n  }\r\n\r\n  /**\r\n   * Sets the local user variable with the user provided as param\r\n   * @param user (any). The user to set\r\n   */\r\n  setUser(user : any = null) {\r\n    this.user = user;\r\n  }\r\n\r\n  getUser() : any {\r\n    return this.user;\r\n  }\r\n\r\n  private extractData(res: Response) : any {\r\n    let body = res.json();\r\n\r\n    if (body.codeno === 200 && body.status === 'success') {\r\n      return body.data;\r\n    } else {\r\n      throw body;\r\n    }\r\n  }\r\n\r\n  private handleError (error: Response | any) {\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    let errMsg: string;\r\n    if (error instanceof Response) {\r\n      const body = error.json() || '';\r\n      errMsg = body.message || JSON.stringify(body);\r\n    } else {\r\n      errMsg = error.message ? error.message : error.toString();\r\n    }\r\n    return Observable.throw(errMsg);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/app/modules/users/users.service.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiHost : 'http://localhost:7777'\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n  console.log('ENV: Production');\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// C:/workspacew3/atomiCoconut/client/src/main.ts"],"sourceRoot":"webpack:///"}